# https://docs.docker.com/compose/yml/
# Each service defined in docker-compose.yml must specify exactly one of
# image or build. Other keys are optional, and are analogous to their
# docker run command-line counterparts.
#
# As with docker run, options specified in the Dockerfile (e.g., CMD,
# EXPOSE, VOLUME, ENV) are respected by default - you don't need to
# specify them again in docker-compose.yml.
#

version: '3.7'

services:

  chris:
    image: fnndsc/chris
    environment:
      - DATABASE_HOST=chris_db
      - DATABASE_PORT=5432
      - CHRIS_STORE_URL=http://chris-store.local:8010/api/v1/
      - SWIFT_AUTH_URL=http://swift_service:8080/auth/v1.0
      - CELERY_BROKER_URL=amqp://queue:5672
    env_file:
      - ./secrets/.chris.env
      - ./secrets/.chris_db.env
      - ./secrets/.swift_service.env
    ports:
      - "8000:8000"
    depends_on:
      - chris_db
      - swift_service
      - queue
      - chris_store
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
    labels:
      name: "ChRIS_ultron_backEnd"
      role: "Production server using Apache's mod_wsgi"

  worker:
    image: fnndsc/chris
    environment:
      - DJANGO_DB_MIGRATE=off
      - DJANGO_COLLECTSTATIC=off
      - DATABASE_HOST=chris_db
      - DATABASE_PORT=5432
      - CHRIS_STORE_URL=http://chris-store.local:8010/api/v1/
      - SWIFT_AUTH_URL=http://swift_service:8080/auth/v1.0
      - CELERY_BROKER_URL=amqp://queue:5672
    command: celery -A core worker -c 4 -l info -Q main1,main2
    env_file:
      - ./secrets/.chris.env
      - ./secrets/.chris_db.env
      - ./secrets/.swift_service.env
    depends_on:
      - chris_db
      - swift_service
      - queue
      - pfcon
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
      - remote
    labels:
      name: "ChRIS_ultron_backEnd Asynchronous Task Worker"
      role: "Production async task worker"

  worker_periodic:
    image: fnndsc/chris
    environment:
      - DJANGO_DB_MIGRATE=off
      - DJANGO_COLLECTSTATIC=off
      - DATABASE_HOST=chris_db
      - DATABASE_PORT=5432
      - CHRIS_STORE_URL=http://chris-store.local:8010/api/v1/
      - SWIFT_AUTH_URL=http://swift_service:8080/auth/v1.0
      - CELERY_BROKER_URL=amqp://queue:5672
    command: celery -A core worker -c 2 -l info -Q periodic
    env_file:
      - ./secrets/.chris.env
      - ./secrets/.chris_db.env
      - ./secrets/.swift_service.env
    depends_on:
      - chris_db
      - queue
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
    labels:
      name: "ChRIS_ultron_backEnd Periodic Task Worker"
      role: "Production periodic task worker"

  scheduler:
    image: fnndsc/chris
    environment:
      - DJANGO_DB_MIGRATE=off
      - DJANGO_COLLECTSTATIC=off
      - DATABASE_HOST=chris_db
      - DATABASE_PORT=5432
      - CHRIS_STORE_URL=http://chris-store.local:8010/api/v1/
      - SWIFT_AUTH_URL=http://swift_service:8080/auth/v1.0
      - CELERY_BROKER_URL=amqp://queue:5672
    command: celery -A core beat -l info --pidfile /home/localuser/celerybeat.pid --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./secrets/.chris.env
      - ./secrets/.chris_db.env
      - ./secrets/.swift_service.env
    depends_on:
      - chris_db
      - queue
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
    labels:
      name: "ChRIS_ultron_backEnd Periodic Tasks Scheduler"
      role: "Production periodic tasks scheduler"

  chris_db:
    image: postgres:13
    volumes:
      - chris_db_data:/var/lib/postgresql/data
    env_file:
      - ./secrets/.chris_db.env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
    labels:
      name: "ChRIS_ultron_backEnd PostgreSQL Database"
      role: "Production PostgreSQL database"

  queue:
    image: rabbitmq:3
    hostname: 'queue'
    volumes:
      - queue_data:/var/lib/rabbitmq
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
    labels:
      name: "ChRIS_ultron_backEnd Asynchronous Task Queue"
      role: "Production async task queue"

  chris_store:
    image: fnndsc/chris_store
    environment:
      - DATABASE_HOST=chris_store_db
      - DATABASE_PORT=5432
      - SWIFT_AUTH_URL=http://swift_service:8080/auth/v1.0
    env_file:
      - ./secrets/.chris_store.env
      - ./secrets/.chris_store_db.env
      - ./secrets/.swift_service.env
    ports:
      - "8010:8010"
    depends_on:
      - chris_store_db
      - swift_service
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      local1:
        aliases:
          - chris-store.local
    labels:
      name: "ChRIS_store"
      role: "Chris store service"

  chris_store_db:
    image: postgres:13
    volumes:
      - chris_store_db_data:/var/lib/postgresql/data
    env_file:
      - ./secrets/.chris_store_db.env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
    labels:
      name: "ChRIS_store PostgreSQL Database"
      role: "Chris store database"

  swift_service:
    image: fnndsc/docker-swift-onlyone
    init: true
    volumes:
      - swift_storage:/srv
    env_file:
      - ./secrets/.swift_service.env
    ports:
      - "8080:8080"
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - local1
    labels:
      name: "swift"
      role: "swift object storage service"

  pfcon:
    image: fnndsc/pfcon
    environment:
      - COMPUTE_SERVICE_URL=http://pman:5010/api/v1/
    env_file:
      - ./secrets/.pfcon.env
    # We need to mount a physical dir in the HOST onto the key store in pfcon. This dir
    # is given by the STOREBASE env variable.
    volumes:
      - ${STOREBASE:?}:/home/localuser/storeBase
    ports:
      - "5005:5005"
    depends_on:
      - pman
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      local2:
      remote:
        aliases:
          - pfcon.remote
    labels:
      name: "pfcon"
      role: "pfcon service"

  pman:
    # Since pman spins off containers of its own it needs to mount storeBase dir (where
    # pfcon shares the data) into the spawned container. This directory is passed in the
    # STOREBASE env variable.
    environment:
      - STOREBASE
      - CONTAINER_ENV=swarm
    image: fnndsc/pman
    env_file:
      - ./secrets/.pman.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - "node.role==manager"
    networks:
      - local2
    labels:
      name: "pman"
      role: "pman service"


networks:
  local1:
  local2:
  remote:

volumes:
  chris_db_data:
  chris_store_db_data:
  queue_data:
  swift_storage:
